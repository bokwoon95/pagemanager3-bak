This means themesmanager is responsible for the editmode.js asset, which means it needs to somehow serve that at a specific endpoint and communicate it down the templates which must all reflect that endpoint.
Is this too much coupling?
Should I just merge themesmanager into pagemanager?
What do I get out of splitting themesmanager into its own package?
The original intention was to split pagemanager into independent modules which can be tested and developed in isolation on their own.
cryptoutil's KeyBox and PasswordBox are great examples of this
but kinda feel like themesmanager's goals overlap too tightly with pagemanager's
At its core themesmanager is about serving a directory of themes and connecting it with a KV store in order to make HTML pages.
It feels like it could stand on its own and could be useful to someone else, which is why I thought of making it an independent package.

Or maybe themesmanager just has to concern itself with reading the themes and data, it doesn't have to care about how the data is set?
pagemanager can do that without themesmanager by simply injecting the correspoding script into the page
but uhhh that means theme authors lose the ability to set data using vanilla themesmanager, which is unacceptable.

a template is uniquely identified by its themePath and templateName. Therefore the resultant *template.Template, TemplateVariables, ContentSecurityPolicy can be cached
Also it needs a KV store

templatedir.New(dir, store, InternalAssets("/bruh"))
InternalPre("/bruh") // default: /templatedir
URLPrefix(prefix string, allow func(*http.Request) bool)
AssetURLPrefix("")
AssetFilter(func(w, r) (allow bool) { return true })
- if file ends with config.js, deny
AssetNotFound()
index.sha256-abcdefghijklmnop.css
index.sha256-abcdefghijklmnop.js
- templatedir-editmode.js
- templatedir-editmode.css
- <uuid>-editmode.js
- <uuid>-editmode.css
{{ .JS }}
PAGEMANAGER_ENV("URL")
PAGEMANAGER_ENV("Namespace")
PAGEMANAGER_ENV("LocaleCode")
PAGEMANAGER_ENV("EditMode")
